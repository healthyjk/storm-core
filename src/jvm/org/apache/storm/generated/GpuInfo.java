/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.storm.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class GpuInfo implements org.apache.thrift.TBase<GpuInfo, GpuInfo._Fields>, java.io.Serializable, Cloneable, Comparable<GpuInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GpuInfo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DRIVER_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("driver_version", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MAJOR_FIELD_DESC = new org.apache.thrift.protocol.TField("major", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField MINOR_FIELD_DESC = new org.apache.thrift.protocol.TField("minor", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TOTAL_MEM_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("total_mem_size", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField MULTI_PROCESSOR_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("multi_processor_count", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField CUDA_CORES_PER_MULTIPROC_FIELD_DESC = new org.apache.thrift.protocol.TField("cuda_cores_per_multiproc", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField GPU_CLOCK_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("gpu_clock_rate", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField MEM_CLOCK_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("mem_clock_rate", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField MEM_BUS_WIDTH_FIELD_DESC = new org.apache.thrift.protocol.TField("mem_bus_width", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField DEVICE_OVERLAP_FIELD_DESC = new org.apache.thrift.protocol.TField("device_overlap", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField ASYNC_ENGINE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("async_engine_count", org.apache.thrift.protocol.TType.I32, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GpuInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GpuInfoTupleSchemeFactory());
  }

  private int id; // required
  private String name; // required
  private int driver_version; // required
  private int major; // required
  private int minor; // required
  private long total_mem_size; // required
  private int multi_processor_count; // required
  private int cuda_cores_per_multiproc; // required
  private int gpu_clock_rate; // required
  private int mem_clock_rate; // required
  private int mem_bus_width; // required
  private boolean device_overlap; // required
  private int async_engine_count; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    DRIVER_VERSION((short)3, "driver_version"),
    MAJOR((short)4, "major"),
    MINOR((short)5, "minor"),
    TOTAL_MEM_SIZE((short)6, "total_mem_size"),
    MULTI_PROCESSOR_COUNT((short)7, "multi_processor_count"),
    CUDA_CORES_PER_MULTIPROC((short)8, "cuda_cores_per_multiproc"),
    GPU_CLOCK_RATE((short)9, "gpu_clock_rate"),
    MEM_CLOCK_RATE((short)10, "mem_clock_rate"),
    MEM_BUS_WIDTH((short)11, "mem_bus_width"),
    DEVICE_OVERLAP((short)12, "device_overlap"),
    ASYNC_ENGINE_COUNT((short)13, "async_engine_count");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // DRIVER_VERSION
          return DRIVER_VERSION;
        case 4: // MAJOR
          return MAJOR;
        case 5: // MINOR
          return MINOR;
        case 6: // TOTAL_MEM_SIZE
          return TOTAL_MEM_SIZE;
        case 7: // MULTI_PROCESSOR_COUNT
          return MULTI_PROCESSOR_COUNT;
        case 8: // CUDA_CORES_PER_MULTIPROC
          return CUDA_CORES_PER_MULTIPROC;
        case 9: // GPU_CLOCK_RATE
          return GPU_CLOCK_RATE;
        case 10: // MEM_CLOCK_RATE
          return MEM_CLOCK_RATE;
        case 11: // MEM_BUS_WIDTH
          return MEM_BUS_WIDTH;
        case 12: // DEVICE_OVERLAP
          return DEVICE_OVERLAP;
        case 13: // ASYNC_ENGINE_COUNT
          return ASYNC_ENGINE_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __DRIVER_VERSION_ISSET_ID = 1;
  private static final int __MAJOR_ISSET_ID = 2;
  private static final int __MINOR_ISSET_ID = 3;
  private static final int __TOTAL_MEM_SIZE_ISSET_ID = 4;
  private static final int __MULTI_PROCESSOR_COUNT_ISSET_ID = 5;
  private static final int __CUDA_CORES_PER_MULTIPROC_ISSET_ID = 6;
  private static final int __GPU_CLOCK_RATE_ISSET_ID = 7;
  private static final int __MEM_CLOCK_RATE_ISSET_ID = 8;
  private static final int __MEM_BUS_WIDTH_ISSET_ID = 9;
  private static final int __DEVICE_OVERLAP_ISSET_ID = 10;
  private static final int __ASYNC_ENGINE_COUNT_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DRIVER_VERSION, new org.apache.thrift.meta_data.FieldMetaData("driver_version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAJOR, new org.apache.thrift.meta_data.FieldMetaData("major", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MINOR, new org.apache.thrift.meta_data.FieldMetaData("minor", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_MEM_SIZE, new org.apache.thrift.meta_data.FieldMetaData("total_mem_size", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MULTI_PROCESSOR_COUNT, new org.apache.thrift.meta_data.FieldMetaData("multi_processor_count", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUDA_CORES_PER_MULTIPROC, new org.apache.thrift.meta_data.FieldMetaData("cuda_cores_per_multiproc", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GPU_CLOCK_RATE, new org.apache.thrift.meta_data.FieldMetaData("gpu_clock_rate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEM_CLOCK_RATE, new org.apache.thrift.meta_data.FieldMetaData("mem_clock_rate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEM_BUS_WIDTH, new org.apache.thrift.meta_data.FieldMetaData("mem_bus_width", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEVICE_OVERLAP, new org.apache.thrift.meta_data.FieldMetaData("device_overlap", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ASYNC_ENGINE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("async_engine_count", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GpuInfo.class, metaDataMap);
  }

  public GpuInfo() {
  }

  public GpuInfo(
    int id,
    String name,
    int driver_version,
    int major,
    int minor,
    long total_mem_size,
    int multi_processor_count,
    int cuda_cores_per_multiproc,
    int gpu_clock_rate,
    int mem_clock_rate,
    int mem_bus_width,
    boolean device_overlap,
    int async_engine_count)
  {
    this();
    this.id = id;
    set_id_isSet(true);
    this.name = name;
    this.driver_version = driver_version;
    set_driver_version_isSet(true);
    this.major = major;
    set_major_isSet(true);
    this.minor = minor;
    set_minor_isSet(true);
    this.total_mem_size = total_mem_size;
    set_total_mem_size_isSet(true);
    this.multi_processor_count = multi_processor_count;
    set_multi_processor_count_isSet(true);
    this.cuda_cores_per_multiproc = cuda_cores_per_multiproc;
    set_cuda_cores_per_multiproc_isSet(true);
    this.gpu_clock_rate = gpu_clock_rate;
    set_gpu_clock_rate_isSet(true);
    this.mem_clock_rate = mem_clock_rate;
    set_mem_clock_rate_isSet(true);
    this.mem_bus_width = mem_bus_width;
    set_mem_bus_width_isSet(true);
    this.device_overlap = device_overlap;
    set_device_overlap_isSet(true);
    this.async_engine_count = async_engine_count;
    set_async_engine_count_isSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GpuInfo(GpuInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.is_set_name()) {
      this.name = other.name;
    }
    this.driver_version = other.driver_version;
    this.major = other.major;
    this.minor = other.minor;
    this.total_mem_size = other.total_mem_size;
    this.multi_processor_count = other.multi_processor_count;
    this.cuda_cores_per_multiproc = other.cuda_cores_per_multiproc;
    this.gpu_clock_rate = other.gpu_clock_rate;
    this.mem_clock_rate = other.mem_clock_rate;
    this.mem_bus_width = other.mem_bus_width;
    this.device_overlap = other.device_overlap;
    this.async_engine_count = other.async_engine_count;
  }

  public GpuInfo deepCopy() {
    return new GpuInfo(this);
  }

  @Override
  public void clear() {
    set_id_isSet(false);
    this.id = 0;
    this.name = null;
    set_driver_version_isSet(false);
    this.driver_version = 0;
    set_major_isSet(false);
    this.major = 0;
    set_minor_isSet(false);
    this.minor = 0;
    set_total_mem_size_isSet(false);
    this.total_mem_size = 0;
    set_multi_processor_count_isSet(false);
    this.multi_processor_count = 0;
    set_cuda_cores_per_multiproc_isSet(false);
    this.cuda_cores_per_multiproc = 0;
    set_gpu_clock_rate_isSet(false);
    this.gpu_clock_rate = 0;
    set_mem_clock_rate_isSet(false);
    this.mem_clock_rate = 0;
    set_mem_bus_width_isSet(false);
    this.mem_bus_width = 0;
    set_device_overlap_isSet(false);
    this.device_overlap = false;
    set_async_engine_count_isSet(false);
    this.async_engine_count = 0;
  }

  public int get_id() {
    return this.id;
  }

  public void set_id(int id) {
    this.id = id;
    set_id_isSet(true);
  }

  public void unset_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean is_set_id() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void set_id_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String get_name() {
    return this.name;
  }

  public void set_name(String name) {
    this.name = name;
  }

  public void unset_name() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean is_set_name() {
    return this.name != null;
  }

  public void set_name_isSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int get_driver_version() {
    return this.driver_version;
  }

  public void set_driver_version(int driver_version) {
    this.driver_version = driver_version;
    set_driver_version_isSet(true);
  }

  public void unset_driver_version() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DRIVER_VERSION_ISSET_ID);
  }

  /** Returns true if field driver_version is set (has been assigned a value) and false otherwise */
  public boolean is_set_driver_version() {
    return EncodingUtils.testBit(__isset_bitfield, __DRIVER_VERSION_ISSET_ID);
  }

  public void set_driver_version_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DRIVER_VERSION_ISSET_ID, value);
  }

  public int get_major() {
    return this.major;
  }

  public void set_major(int major) {
    this.major = major;
    set_major_isSet(true);
  }

  public void unset_major() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAJOR_ISSET_ID);
  }

  /** Returns true if field major is set (has been assigned a value) and false otherwise */
  public boolean is_set_major() {
    return EncodingUtils.testBit(__isset_bitfield, __MAJOR_ISSET_ID);
  }

  public void set_major_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAJOR_ISSET_ID, value);
  }

  public int get_minor() {
    return this.minor;
  }

  public void set_minor(int minor) {
    this.minor = minor;
    set_minor_isSet(true);
  }

  public void unset_minor() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINOR_ISSET_ID);
  }

  /** Returns true if field minor is set (has been assigned a value) and false otherwise */
  public boolean is_set_minor() {
    return EncodingUtils.testBit(__isset_bitfield, __MINOR_ISSET_ID);
  }

  public void set_minor_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINOR_ISSET_ID, value);
  }

  public long get_total_mem_size() {
    return this.total_mem_size;
  }

  public void set_total_mem_size(long total_mem_size) {
    this.total_mem_size = total_mem_size;
    set_total_mem_size_isSet(true);
  }

  public void unset_total_mem_size() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTAL_MEM_SIZE_ISSET_ID);
  }

  /** Returns true if field total_mem_size is set (has been assigned a value) and false otherwise */
  public boolean is_set_total_mem_size() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTAL_MEM_SIZE_ISSET_ID);
  }

  public void set_total_mem_size_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTAL_MEM_SIZE_ISSET_ID, value);
  }

  public int get_multi_processor_count() {
    return this.multi_processor_count;
  }

  public void set_multi_processor_count(int multi_processor_count) {
    this.multi_processor_count = multi_processor_count;
    set_multi_processor_count_isSet(true);
  }

  public void unset_multi_processor_count() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MULTI_PROCESSOR_COUNT_ISSET_ID);
  }

  /** Returns true if field multi_processor_count is set (has been assigned a value) and false otherwise */
  public boolean is_set_multi_processor_count() {
    return EncodingUtils.testBit(__isset_bitfield, __MULTI_PROCESSOR_COUNT_ISSET_ID);
  }

  public void set_multi_processor_count_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MULTI_PROCESSOR_COUNT_ISSET_ID, value);
  }

  public int get_cuda_cores_per_multiproc() {
    return this.cuda_cores_per_multiproc;
  }

  public void set_cuda_cores_per_multiproc(int cuda_cores_per_multiproc) {
    this.cuda_cores_per_multiproc = cuda_cores_per_multiproc;
    set_cuda_cores_per_multiproc_isSet(true);
  }

  public void unset_cuda_cores_per_multiproc() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUDA_CORES_PER_MULTIPROC_ISSET_ID);
  }

  /** Returns true if field cuda_cores_per_multiproc is set (has been assigned a value) and false otherwise */
  public boolean is_set_cuda_cores_per_multiproc() {
    return EncodingUtils.testBit(__isset_bitfield, __CUDA_CORES_PER_MULTIPROC_ISSET_ID);
  }

  public void set_cuda_cores_per_multiproc_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUDA_CORES_PER_MULTIPROC_ISSET_ID, value);
  }

  public int get_gpu_clock_rate() {
    return this.gpu_clock_rate;
  }

  public void set_gpu_clock_rate(int gpu_clock_rate) {
    this.gpu_clock_rate = gpu_clock_rate;
    set_gpu_clock_rate_isSet(true);
  }

  public void unset_gpu_clock_rate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GPU_CLOCK_RATE_ISSET_ID);
  }

  /** Returns true if field gpu_clock_rate is set (has been assigned a value) and false otherwise */
  public boolean is_set_gpu_clock_rate() {
    return EncodingUtils.testBit(__isset_bitfield, __GPU_CLOCK_RATE_ISSET_ID);
  }

  public void set_gpu_clock_rate_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GPU_CLOCK_RATE_ISSET_ID, value);
  }

  public int get_mem_clock_rate() {
    return this.mem_clock_rate;
  }

  public void set_mem_clock_rate(int mem_clock_rate) {
    this.mem_clock_rate = mem_clock_rate;
    set_mem_clock_rate_isSet(true);
  }

  public void unset_mem_clock_rate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEM_CLOCK_RATE_ISSET_ID);
  }

  /** Returns true if field mem_clock_rate is set (has been assigned a value) and false otherwise */
  public boolean is_set_mem_clock_rate() {
    return EncodingUtils.testBit(__isset_bitfield, __MEM_CLOCK_RATE_ISSET_ID);
  }

  public void set_mem_clock_rate_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEM_CLOCK_RATE_ISSET_ID, value);
  }

  public int get_mem_bus_width() {
    return this.mem_bus_width;
  }

  public void set_mem_bus_width(int mem_bus_width) {
    this.mem_bus_width = mem_bus_width;
    set_mem_bus_width_isSet(true);
  }

  public void unset_mem_bus_width() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEM_BUS_WIDTH_ISSET_ID);
  }

  /** Returns true if field mem_bus_width is set (has been assigned a value) and false otherwise */
  public boolean is_set_mem_bus_width() {
    return EncodingUtils.testBit(__isset_bitfield, __MEM_BUS_WIDTH_ISSET_ID);
  }

  public void set_mem_bus_width_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEM_BUS_WIDTH_ISSET_ID, value);
  }

  public boolean is_device_overlap() {
    return this.device_overlap;
  }

  public void set_device_overlap(boolean device_overlap) {
    this.device_overlap = device_overlap;
    set_device_overlap_isSet(true);
  }

  public void unset_device_overlap() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEVICE_OVERLAP_ISSET_ID);
  }

  /** Returns true if field device_overlap is set (has been assigned a value) and false otherwise */
  public boolean is_set_device_overlap() {
    return EncodingUtils.testBit(__isset_bitfield, __DEVICE_OVERLAP_ISSET_ID);
  }

  public void set_device_overlap_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEVICE_OVERLAP_ISSET_ID, value);
  }

  public int get_async_engine_count() {
    return this.async_engine_count;
  }

  public void set_async_engine_count(int async_engine_count) {
    this.async_engine_count = async_engine_count;
    set_async_engine_count_isSet(true);
  }

  public void unset_async_engine_count() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASYNC_ENGINE_COUNT_ISSET_ID);
  }

  /** Returns true if field async_engine_count is set (has been assigned a value) and false otherwise */
  public boolean is_set_async_engine_count() {
    return EncodingUtils.testBit(__isset_bitfield, __ASYNC_ENGINE_COUNT_ISSET_ID);
  }

  public void set_async_engine_count_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASYNC_ENGINE_COUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unset_id();
      } else {
        set_id((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unset_name();
      } else {
        set_name((String)value);
      }
      break;

    case DRIVER_VERSION:
      if (value == null) {
        unset_driver_version();
      } else {
        set_driver_version((Integer)value);
      }
      break;

    case MAJOR:
      if (value == null) {
        unset_major();
      } else {
        set_major((Integer)value);
      }
      break;

    case MINOR:
      if (value == null) {
        unset_minor();
      } else {
        set_minor((Integer)value);
      }
      break;

    case TOTAL_MEM_SIZE:
      if (value == null) {
        unset_total_mem_size();
      } else {
        set_total_mem_size((Long)value);
      }
      break;

    case MULTI_PROCESSOR_COUNT:
      if (value == null) {
        unset_multi_processor_count();
      } else {
        set_multi_processor_count((Integer)value);
      }
      break;

    case CUDA_CORES_PER_MULTIPROC:
      if (value == null) {
        unset_cuda_cores_per_multiproc();
      } else {
        set_cuda_cores_per_multiproc((Integer)value);
      }
      break;

    case GPU_CLOCK_RATE:
      if (value == null) {
        unset_gpu_clock_rate();
      } else {
        set_gpu_clock_rate((Integer)value);
      }
      break;

    case MEM_CLOCK_RATE:
      if (value == null) {
        unset_mem_clock_rate();
      } else {
        set_mem_clock_rate((Integer)value);
      }
      break;

    case MEM_BUS_WIDTH:
      if (value == null) {
        unset_mem_bus_width();
      } else {
        set_mem_bus_width((Integer)value);
      }
      break;

    case DEVICE_OVERLAP:
      if (value == null) {
        unset_device_overlap();
      } else {
        set_device_overlap((Boolean)value);
      }
      break;

    case ASYNC_ENGINE_COUNT:
      if (value == null) {
        unset_async_engine_count();
      } else {
        set_async_engine_count((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return get_id();

    case NAME:
      return get_name();

    case DRIVER_VERSION:
      return get_driver_version();

    case MAJOR:
      return get_major();

    case MINOR:
      return get_minor();

    case TOTAL_MEM_SIZE:
      return get_total_mem_size();

    case MULTI_PROCESSOR_COUNT:
      return get_multi_processor_count();

    case CUDA_CORES_PER_MULTIPROC:
      return get_cuda_cores_per_multiproc();

    case GPU_CLOCK_RATE:
      return get_gpu_clock_rate();

    case MEM_CLOCK_RATE:
      return get_mem_clock_rate();

    case MEM_BUS_WIDTH:
      return get_mem_bus_width();

    case DEVICE_OVERLAP:
      return is_device_overlap();

    case ASYNC_ENGINE_COUNT:
      return get_async_engine_count();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return is_set_id();
    case NAME:
      return is_set_name();
    case DRIVER_VERSION:
      return is_set_driver_version();
    case MAJOR:
      return is_set_major();
    case MINOR:
      return is_set_minor();
    case TOTAL_MEM_SIZE:
      return is_set_total_mem_size();
    case MULTI_PROCESSOR_COUNT:
      return is_set_multi_processor_count();
    case CUDA_CORES_PER_MULTIPROC:
      return is_set_cuda_cores_per_multiproc();
    case GPU_CLOCK_RATE:
      return is_set_gpu_clock_rate();
    case MEM_CLOCK_RATE:
      return is_set_mem_clock_rate();
    case MEM_BUS_WIDTH:
      return is_set_mem_bus_width();
    case DEVICE_OVERLAP:
      return is_set_device_overlap();
    case ASYNC_ENGINE_COUNT:
      return is_set_async_engine_count();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GpuInfo)
      return this.equals((GpuInfo)that);
    return false;
  }

  public boolean equals(GpuInfo that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.is_set_name();
    boolean that_present_name = true && that.is_set_name();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_driver_version = true;
    boolean that_present_driver_version = true;
    if (this_present_driver_version || that_present_driver_version) {
      if (!(this_present_driver_version && that_present_driver_version))
        return false;
      if (this.driver_version != that.driver_version)
        return false;
    }

    boolean this_present_major = true;
    boolean that_present_major = true;
    if (this_present_major || that_present_major) {
      if (!(this_present_major && that_present_major))
        return false;
      if (this.major != that.major)
        return false;
    }

    boolean this_present_minor = true;
    boolean that_present_minor = true;
    if (this_present_minor || that_present_minor) {
      if (!(this_present_minor && that_present_minor))
        return false;
      if (this.minor != that.minor)
        return false;
    }

    boolean this_present_total_mem_size = true;
    boolean that_present_total_mem_size = true;
    if (this_present_total_mem_size || that_present_total_mem_size) {
      if (!(this_present_total_mem_size && that_present_total_mem_size))
        return false;
      if (this.total_mem_size != that.total_mem_size)
        return false;
    }

    boolean this_present_multi_processor_count = true;
    boolean that_present_multi_processor_count = true;
    if (this_present_multi_processor_count || that_present_multi_processor_count) {
      if (!(this_present_multi_processor_count && that_present_multi_processor_count))
        return false;
      if (this.multi_processor_count != that.multi_processor_count)
        return false;
    }

    boolean this_present_cuda_cores_per_multiproc = true;
    boolean that_present_cuda_cores_per_multiproc = true;
    if (this_present_cuda_cores_per_multiproc || that_present_cuda_cores_per_multiproc) {
      if (!(this_present_cuda_cores_per_multiproc && that_present_cuda_cores_per_multiproc))
        return false;
      if (this.cuda_cores_per_multiproc != that.cuda_cores_per_multiproc)
        return false;
    }

    boolean this_present_gpu_clock_rate = true;
    boolean that_present_gpu_clock_rate = true;
    if (this_present_gpu_clock_rate || that_present_gpu_clock_rate) {
      if (!(this_present_gpu_clock_rate && that_present_gpu_clock_rate))
        return false;
      if (this.gpu_clock_rate != that.gpu_clock_rate)
        return false;
    }

    boolean this_present_mem_clock_rate = true;
    boolean that_present_mem_clock_rate = true;
    if (this_present_mem_clock_rate || that_present_mem_clock_rate) {
      if (!(this_present_mem_clock_rate && that_present_mem_clock_rate))
        return false;
      if (this.mem_clock_rate != that.mem_clock_rate)
        return false;
    }

    boolean this_present_mem_bus_width = true;
    boolean that_present_mem_bus_width = true;
    if (this_present_mem_bus_width || that_present_mem_bus_width) {
      if (!(this_present_mem_bus_width && that_present_mem_bus_width))
        return false;
      if (this.mem_bus_width != that.mem_bus_width)
        return false;
    }

    boolean this_present_device_overlap = true;
    boolean that_present_device_overlap = true;
    if (this_present_device_overlap || that_present_device_overlap) {
      if (!(this_present_device_overlap && that_present_device_overlap))
        return false;
      if (this.device_overlap != that.device_overlap)
        return false;
    }

    boolean this_present_async_engine_count = true;
    boolean that_present_async_engine_count = true;
    if (this_present_async_engine_count || that_present_async_engine_count) {
      if (!(this_present_async_engine_count && that_present_async_engine_count))
        return false;
      if (this.async_engine_count != that.async_engine_count)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_name = true && (is_set_name());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_driver_version = true;
    list.add(present_driver_version);
    if (present_driver_version)
      list.add(driver_version);

    boolean present_major = true;
    list.add(present_major);
    if (present_major)
      list.add(major);

    boolean present_minor = true;
    list.add(present_minor);
    if (present_minor)
      list.add(minor);

    boolean present_total_mem_size = true;
    list.add(present_total_mem_size);
    if (present_total_mem_size)
      list.add(total_mem_size);

    boolean present_multi_processor_count = true;
    list.add(present_multi_processor_count);
    if (present_multi_processor_count)
      list.add(multi_processor_count);

    boolean present_cuda_cores_per_multiproc = true;
    list.add(present_cuda_cores_per_multiproc);
    if (present_cuda_cores_per_multiproc)
      list.add(cuda_cores_per_multiproc);

    boolean present_gpu_clock_rate = true;
    list.add(present_gpu_clock_rate);
    if (present_gpu_clock_rate)
      list.add(gpu_clock_rate);

    boolean present_mem_clock_rate = true;
    list.add(present_mem_clock_rate);
    if (present_mem_clock_rate)
      list.add(mem_clock_rate);

    boolean present_mem_bus_width = true;
    list.add(present_mem_bus_width);
    if (present_mem_bus_width)
      list.add(mem_bus_width);

    boolean present_device_overlap = true;
    list.add(present_device_overlap);
    if (present_device_overlap)
      list.add(device_overlap);

    boolean present_async_engine_count = true;
    list.add(present_async_engine_count);
    if (present_async_engine_count)
      list.add(async_engine_count);

    return list.hashCode();
  }

  @Override
  public int compareTo(GpuInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_id()).compareTo(other.is_set_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_name()).compareTo(other.is_set_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_driver_version()).compareTo(other.is_set_driver_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_driver_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.driver_version, other.driver_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_major()).compareTo(other.is_set_major());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_major()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.major, other.major);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_minor()).compareTo(other.is_set_minor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_minor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minor, other.minor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_total_mem_size()).compareTo(other.is_set_total_mem_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_total_mem_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total_mem_size, other.total_mem_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_multi_processor_count()).compareTo(other.is_set_multi_processor_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_multi_processor_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multi_processor_count, other.multi_processor_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_cuda_cores_per_multiproc()).compareTo(other.is_set_cuda_cores_per_multiproc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_cuda_cores_per_multiproc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cuda_cores_per_multiproc, other.cuda_cores_per_multiproc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_gpu_clock_rate()).compareTo(other.is_set_gpu_clock_rate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_gpu_clock_rate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gpu_clock_rate, other.gpu_clock_rate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_mem_clock_rate()).compareTo(other.is_set_mem_clock_rate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_mem_clock_rate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mem_clock_rate, other.mem_clock_rate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_mem_bus_width()).compareTo(other.is_set_mem_bus_width());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_mem_bus_width()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mem_bus_width, other.mem_bus_width);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_device_overlap()).compareTo(other.is_set_device_overlap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_device_overlap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device_overlap, other.device_overlap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_async_engine_count()).compareTo(other.is_set_async_engine_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_async_engine_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.async_engine_count, other.async_engine_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GpuInfo(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("driver_version:");
    sb.append(this.driver_version);
    first = false;
    if (!first) sb.append(", ");
    sb.append("major:");
    sb.append(this.major);
    first = false;
    if (!first) sb.append(", ");
    sb.append("minor:");
    sb.append(this.minor);
    first = false;
    if (!first) sb.append(", ");
    sb.append("total_mem_size:");
    sb.append(this.total_mem_size);
    first = false;
    if (!first) sb.append(", ");
    sb.append("multi_processor_count:");
    sb.append(this.multi_processor_count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cuda_cores_per_multiproc:");
    sb.append(this.cuda_cores_per_multiproc);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gpu_clock_rate:");
    sb.append(this.gpu_clock_rate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mem_clock_rate:");
    sb.append(this.mem_clock_rate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mem_bus_width:");
    sb.append(this.mem_bus_width);
    first = false;
    if (!first) sb.append(", ");
    sb.append("device_overlap:");
    sb.append(this.device_overlap);
    first = false;
    if (!first) sb.append(", ");
    sb.append("async_engine_count:");
    sb.append(this.async_engine_count);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_id()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' is unset! Struct:" + toString());
    }

    if (!is_set_name()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' is unset! Struct:" + toString());
    }

    if (!is_set_driver_version()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'driver_version' is unset! Struct:" + toString());
    }

    if (!is_set_major()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'major' is unset! Struct:" + toString());
    }

    if (!is_set_minor()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'minor' is unset! Struct:" + toString());
    }

    if (!is_set_total_mem_size()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'total_mem_size' is unset! Struct:" + toString());
    }

    if (!is_set_multi_processor_count()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'multi_processor_count' is unset! Struct:" + toString());
    }

    if (!is_set_cuda_cores_per_multiproc()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'cuda_cores_per_multiproc' is unset! Struct:" + toString());
    }

    if (!is_set_gpu_clock_rate()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'gpu_clock_rate' is unset! Struct:" + toString());
    }

    if (!is_set_mem_clock_rate()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'mem_clock_rate' is unset! Struct:" + toString());
    }

    if (!is_set_mem_bus_width()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'mem_bus_width' is unset! Struct:" + toString());
    }

    if (!is_set_device_overlap()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'device_overlap' is unset! Struct:" + toString());
    }

    if (!is_set_async_engine_count()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'async_engine_count' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GpuInfoStandardSchemeFactory implements SchemeFactory {
    public GpuInfoStandardScheme getScheme() {
      return new GpuInfoStandardScheme();
    }
  }

  private static class GpuInfoStandardScheme extends StandardScheme<GpuInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GpuInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.set_id_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.set_name_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DRIVER_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.driver_version = iprot.readI32();
              struct.set_driver_version_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MAJOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.major = iprot.readI32();
              struct.set_major_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MINOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.minor = iprot.readI32();
              struct.set_minor_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TOTAL_MEM_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.total_mem_size = iprot.readI64();
              struct.set_total_mem_size_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MULTI_PROCESSOR_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.multi_processor_count = iprot.readI32();
              struct.set_multi_processor_count_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CUDA_CORES_PER_MULTIPROC
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cuda_cores_per_multiproc = iprot.readI32();
              struct.set_cuda_cores_per_multiproc_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // GPU_CLOCK_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.gpu_clock_rate = iprot.readI32();
              struct.set_gpu_clock_rate_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MEM_CLOCK_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mem_clock_rate = iprot.readI32();
              struct.set_mem_clock_rate_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MEM_BUS_WIDTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mem_bus_width = iprot.readI32();
              struct.set_mem_bus_width_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DEVICE_OVERLAP
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.device_overlap = iprot.readBool();
              struct.set_device_overlap_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ASYNC_ENGINE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.async_engine_count = iprot.readI32();
              struct.set_async_engine_count_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GpuInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DRIVER_VERSION_FIELD_DESC);
      oprot.writeI32(struct.driver_version);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAJOR_FIELD_DESC);
      oprot.writeI32(struct.major);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MINOR_FIELD_DESC);
      oprot.writeI32(struct.minor);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_MEM_SIZE_FIELD_DESC);
      oprot.writeI64(struct.total_mem_size);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MULTI_PROCESSOR_COUNT_FIELD_DESC);
      oprot.writeI32(struct.multi_processor_count);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CUDA_CORES_PER_MULTIPROC_FIELD_DESC);
      oprot.writeI32(struct.cuda_cores_per_multiproc);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GPU_CLOCK_RATE_FIELD_DESC);
      oprot.writeI32(struct.gpu_clock_rate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEM_CLOCK_RATE_FIELD_DESC);
      oprot.writeI32(struct.mem_clock_rate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEM_BUS_WIDTH_FIELD_DESC);
      oprot.writeI32(struct.mem_bus_width);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEVICE_OVERLAP_FIELD_DESC);
      oprot.writeBool(struct.device_overlap);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ASYNC_ENGINE_COUNT_FIELD_DESC);
      oprot.writeI32(struct.async_engine_count);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GpuInfoTupleSchemeFactory implements SchemeFactory {
    public GpuInfoTupleScheme getScheme() {
      return new GpuInfoTupleScheme();
    }
  }

  private static class GpuInfoTupleScheme extends TupleScheme<GpuInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GpuInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.id);
      oprot.writeString(struct.name);
      oprot.writeI32(struct.driver_version);
      oprot.writeI32(struct.major);
      oprot.writeI32(struct.minor);
      oprot.writeI64(struct.total_mem_size);
      oprot.writeI32(struct.multi_processor_count);
      oprot.writeI32(struct.cuda_cores_per_multiproc);
      oprot.writeI32(struct.gpu_clock_rate);
      oprot.writeI32(struct.mem_clock_rate);
      oprot.writeI32(struct.mem_bus_width);
      oprot.writeBool(struct.device_overlap);
      oprot.writeI32(struct.async_engine_count);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GpuInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readI32();
      struct.set_id_isSet(true);
      struct.name = iprot.readString();
      struct.set_name_isSet(true);
      struct.driver_version = iprot.readI32();
      struct.set_driver_version_isSet(true);
      struct.major = iprot.readI32();
      struct.set_major_isSet(true);
      struct.minor = iprot.readI32();
      struct.set_minor_isSet(true);
      struct.total_mem_size = iprot.readI64();
      struct.set_total_mem_size_isSet(true);
      struct.multi_processor_count = iprot.readI32();
      struct.set_multi_processor_count_isSet(true);
      struct.cuda_cores_per_multiproc = iprot.readI32();
      struct.set_cuda_cores_per_multiproc_isSet(true);
      struct.gpu_clock_rate = iprot.readI32();
      struct.set_gpu_clock_rate_isSet(true);
      struct.mem_clock_rate = iprot.readI32();
      struct.set_mem_clock_rate_isSet(true);
      struct.mem_bus_width = iprot.readI32();
      struct.set_mem_bus_width_isSet(true);
      struct.device_overlap = iprot.readBool();
      struct.set_device_overlap_isSet(true);
      struct.async_engine_count = iprot.readI32();
      struct.set_async_engine_count_isSet(true);
    }
  }

}

